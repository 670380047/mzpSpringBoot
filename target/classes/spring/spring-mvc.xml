<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--启用spring的一些注解-->
    <!--<context:annotation-config/>-->

    <!--1.开启spring的一些配置，和<context:annotation-config/>功能一样。
        2.自动扫描该包，默认是把注解了@Service、@Controller、@Repository注册为bean（和1的作用一样）。
        关闭了默认过滤之后，即use-default-filters="false"，就，只配置include-filter标注的注解类型了
        使springmvc认为把该包下使用了@Controller、@Service注解的类注册为Bean-->
    <context:component-scan base-package="com.example" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!--handlerMapping无需配置，springmvc默认启动-->


    <!--静态资源映射-->
    <!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="WEB-INF/statics/css"/>
    <mvc:resources mapping="/js/**" location="WEB-INF/statics/js"/>
    <mvc:resources mapping="/image/**" location="WEB-INF/statics/image"/>

    <!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下-->
    <!--<mvc:resources mapping="/css/**" location="/statics/css/"/>-->
    <!--<mvc:resources mapping="/js/**" location="/statics/js/"/>-->
    <!--<mvc:resources mapping="/image/**" location="/statics/images/"/>-->

    <mvc:interceptors>
        <!--只指定拦截器，不指定拦截路径，拦截路径默认为/*-->
        <bean class="com.example.service.intercepter.HandlerInterceptor1"/>

        <!--<mvc:interceptor>-->
        <!--<mvc:mapping path="/*"/>-->
        <!--<bean class="com.example.service.intercepter.HandlerInterceptor1"></bean>-->
        <!--</mvc:interceptor>-->

        <!--<mvc:interceptor>-->
            <!--设置拦截路径-->
            <!--<mvc:mapping path="/handle1"/>-->
            <!--设置发生作用的拦截器-->
            <!--<bean class="com.example.service.intercepter.HandlerInterceptor1"></bean>-->
        <!--</mvc:interceptor>-->

    </mvc:interceptors>


    <!--配置注解驱动，可以将request参数与绑定到controller参数上。还有映射器、适配器之类的-->
    <mvc:annotation-driven>
        <!--配置消息转换器，解决@resopnseBody返回json串的中文乱码（？？？）问题-->
        <mvc:message-converters register-defaults="false">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <!--方法一，设置消息转换器StringHttpMessageConverter的默认字符编码-->
                <constructor-arg value="utf-8"/>

                <!--方法二-->
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=utf-8</value>
                        <value>text/html;charset=utf-8</value>
                        <value>text/plain;charset=utf-8</value>
                    </list>
                </property>

                <!--方法三同方法一，设置消息转换器StringHttpMessageConverter的默认字符编码 -->
                <property name="defaultCharset" value="utf-8">
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/"/>    <!-- jsp文件所在位置-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"/>  <!--大小限制20M-->
        <property name="defaultEncoding" value="utf-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>

</beans>