<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--maven会根据这个parent中的springboot版本，来为其他依赖寻找最合适的版本，所以下面的依赖不需要指定版本-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.example</groupId>
    <artifactId>mzpspringboot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <!--项目名称，maven生成文档时使用-->
    <name>mzpspringboot</name>
    <packaging>war</packaging>
    <description>Demo project for Spring Boot</description>


    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <!--spring-boot-starter-***  是springboot的起步依赖。他会根据当前使用的springboot
            版本来选择合适的（经过测试的版本）的依赖版本，并且会导入该依赖所需要的其他依赖
            -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!--移除嵌入式tomcat插件（因为要使用外部的tomcat）-->
            <!--<exclusions>-->
                <!--<exclusion>-->
                    <!--<groupId>org.springframework.boot</groupId>-->
                    <!--<artifactId>spring-boot-starter-tomcat</artifactId>-->
                <!--</exclusion>-->
            <!--</exclusions>-->
        </dependency>

        <!--移除之后会报错,因为打成war包需要servlet，加入tomcat。或者直接加入下下个依赖servlet-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <!--只在编译测试时有效，打包时，不会打包这个依赖-->
            <scope>provided</scope>
        </dependency>

        <!--部署到外部Tomcat时使用，因为打成war包需要servlet。导入servlet。 也可以用直接导入tomcat-->
        <!--<dependency>-->
            <!--<groupId>javax.servlet</groupId>-->
            <!--<artifactId>javax.servlet-api</artifactId>-->
            <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--===============自己导入===============-->
        <!--logback日志依赖 可以不加。因为spring-boot-starter-web已经依赖于它-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
            <version>2.1.4.RELEASE</version>
        </dependency>

        <!--thymeleaf-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>


        <!--持久化-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-data-jpa</artifactId>-->
        <!--</dependency>-->

        <!--安全-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-security</artifactId>-->
        <!--</dependency>-->

        <!--Springboot热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>




    <build>
        <!--打包后的名字.打包后需要带上工程名去访问。这里就是打包后的工程名-->
        <finalName>springbootwar</finalName>

        <plugins>
            <plugin>
                <!--maven构建插件。主要功能是项目打包成可执行的超级JAR（uber-jar），
                包括把应用程序的所有依赖打入jar中，并未jar添加一个描述文件，其中的内容能让项目通过
                java -jar来运行-->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--热部署配置-->
                    <fork>true</fork>
                </configuration>
            </plugin>
        </plugins>

        <!--项目相关的所有资源路径列表。如配置文件。 最终会被打包。-->
        <resources>
            <resource>
                <!--资源文件存放的路径。该路径相对于pom路径-->
                <directory>src/main/java</directory>
                <!--包含的列表-->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.tld</include>
                </includes>
                <filtering>false</filtering>
                <!--排除的列表。如果include和exclude冲突，则以exclude为准-->
                <!--<excludes>-->
                    <!--<exclude></exclude>-->
                <!--</excludes>-->
            </resource>

            <!--<resource>-->
                <!--&lt;!&ndash;资源文件存放的路径。该路径相对于pom路径&ndash;&gt;-->
                <!--<directory>src/main/resources</directory>-->
                <!--&lt;!&ndash;包含的列表&ndash;&gt;-->
                <!--<includes>-->
                    <!--<include>**/*.properties</include>-->
                    <!--<include>**/*.xml</include>-->
                    <!--<include>**/*.tld</include>-->
                <!--</includes>-->
                <!--<filtering>false</filtering>-->
                <!--&lt;!&ndash;排除的列表。如果include和exclude冲突，则以exclude为准&ndash;&gt;-->
                <!--&lt;!&ndash;<excludes>&ndash;&gt;-->
                <!--&lt;!&ndash;<exclude></exclude>&ndash;&gt;-->
                <!--&lt;!&ndash;</excludes>&ndash;&gt;-->
            <!--</resource>-->
        </resources>
    </build>



</project>
